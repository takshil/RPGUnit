      //
      // Acceptance Tests for RPGUnit.
      //

     H NoMain Option(*SrcStmt)


      //----------------------------------------------------------------------
      //   Exported Procedures
      //----------------------------------------------------------------------

     DsetUpSuite       pr
     DsetUp            pr

     DtestEmptyTest    pr
     DtestSuccess      pr
     DtestFailures     pr
     DtestNonTestProc  pr
     DtestSetupAndTearDown...
     D                 pr
     DtestError        pr
     DtestManyTests    pr
     DtestStackTrace   pr
     DtestMissingObject...
     D                 pr
     DtestErrorDuringSetup...
     D                 pr
     DtestErrorDuringTearDown...
     D                 pr
     DtestNoTestCase   pr
     DtestSetupSuiteAndTearDownSuite...
     D                 pr
     DtestBigInteger   pr
     DtestForceSpoolOnSuccess...
     D                 pr
     DtestReverseOrder...
     D                 pr
     DtestChooseTest   pr
     DtestChooseNonExistingTest...
     D                 pr


      //----------------------------------------------------------------------
      //   Imported Procedures
      //----------------------------------------------------------------------

      /copy RPGUNITY1,DSEC
      /copy RPGUNITY1,QMHRCVPM
      /copy RPGUNITY1,QSPCLOSP
      /copy RPGUNITY1,QSPGETSP
      /copy RPGUNITY1,QSPOPNSP
      /copy RPGUNITY1,TEMPLATES
      /copy RPGUNITY1,USRSPC
      /copy RPGUNIT1,TESTCASE

     Dqcmdexc          pr                  ExtPgm('QCMDEXC')
     D cmd                         1024a   Const Options(*VarSize)
     D len                           15p 5 Const


      //----------------------------------------------------------------------
      //   Private Procedures
      //----------------------------------------------------------------------

     DbufEqual         pr              *
     D expBuf                       256a   Const Varying
     D actBuf_p                        *   Const

     DcloSplf          pr

     DfindInSpool      pr              *
     D charToFind                     1a   Const
     D startPos                        *   Const
     D endPos                          *   Const

     DopnSplf          pr
     D splfNm                        10a   Const

     DrtvMsg           pr           256a
     D msgType                       10a   Const

     Drun              pr
     D cmd                        32767a   Const Varying
     D errorExpected                   n   Const Options(*NoPass)
     D msgType                       10a   Const Options(*NoPass)
     D msgTxt                       256a   Options(*NoPass)

     DsplfLineStartsWith...
     D                 pr
     D expString                    256a   Const Varying


      //----------------------------------------------------------------------
      //   Constants
      //----------------------------------------------------------------------

       // Constants for the 'run' procedure.
     D errorExpected   c                   Const(*on)
     D noError         c                   Const(*off)

       // SNA Character String (in spool files).
       // - New Line
     D NL              c                   Const(x'15')


      //----------------------------------------------------------------------
      //   Global Variables
      //----------------------------------------------------------------------

       // Spool file.
     D splf            ds                  Qualified
         // - Handle
     D   hdl                         10i 0
         // - Print Data User Space Current Position Pointer
     D   bufPos_p                      *
         // - Print Data User Space End Pointer
     D   usrSpcEnd_p                   *

       // Message text.
     D msgTxt          s            256a


      //----------------------------------------------------------------------
      //   Test Procedures
      //----------------------------------------------------------------------

     PsetUpSuite       b                   Export
     DsetUpSuite       pi
      /free

        run( 'RUCRTTST PGM(QTEMP/TESTPGM01) SRCFILE(RPGUNITF1)' );
        run( 'RUCRTTST PGM(QTEMP/TESTPGM02) SRCFILE(RPGUNITF1)' );
        run( 'RUCRTTST PGM(QTEMP/TESTPGM03) SRCFILE(RPGUNITF1)' );
        run( 'RUCRTTST PGM(QTEMP/TESTPGM04) SRCFILE(RPGUNITF1)' );
        run( 'RUCRTTST PGM(QTEMP/TESTPGM05) SRCFILE(RPGUNITF1)' );
        run( 'RUCRTTST PGM(QTEMP/TESTPGM06) SRCFILE(RPGUNITF1)' );
        run( 'RUCRTTST PGM(QTEMP/TESTPGM07) SRCFILE(RPGUNITF1)' );
        callp(e) run( 'DLTSRVPGM QTEMP/TESTPGM08' );    // No TESTPGM08.
        run( 'RUCRTTST PGM(QTEMP/TESTPGM09) SRCFILE(RPGUNITF1)' );
        run( 'RUCRTTST PGM(QTEMP/TESTPGM10) SRCFILE(RPGUNITF1)' );
        run( 'RUCRTTST PGM(QTEMP/TESTPGM11) SRCFILE(RPGUNITF1)' );
        run( 'RUCRTTST PGM(QTEMP/TESTPGM12) SRCFILE(RPGUNITF1)' );
        run( 'RUCRTTST PGM(QTEMP/TESTPGM13) SRCFILE(RPGUNITF1)' );
        run( 'RUCRTTST PGM(QTEMP/TESTPGM14) SRCFILE(RPGUNITF1)' );
        run( 'RUCRTTST PGM(QTEMP/TESTPGM15) SRCFILE(RPGUNITF1)' );
        run( 'RUCRTTST PGM(QTEMP/TESTPGM16) SRCFILE(RPGUNITF1)' );

      /end-free
     P                 e


     PsetUp            b                   Export
     DsetUp            pi
      /free

        clear msgTxt;
        clear splf;

      /end-free
     P                 e


     PtestEmptyTest    b                   Export
     DtestEmptyTest    pi
      /free

        run( 'RUCALLTST QTEMP/TESTPGM01': noError: '*COMP': msgTxt );

        aEqual( 'Success. 1 test cases, 0 assertions, 0 failures, 0 errors.':
                msgTxt );

      /end-free
     P                 e


     PtestSuccess      b                   Export
     DtestSuccess      pi
      /free

        run( 'RUCALLTST QTEMP/TESTPGM02': noError: '*COMP': msgTxt );

        aEqual( 'Success. 1 test cases, 1 assertions, 0 failures, 0 errors.':
                msgTxt );

      /end-free
     P                 e


     PtestFailures     b                   Export
     DtestFailures     pi
      /free

        run( 'RUCALLTST QTEMP/TESTPGM03': errorExpected: '*ESCAPE': msgTxt );

        aEqual( 'FAILURE! 2 test cases, 2 assertions, 2 failures, 0 errors.':
                msgTxt );

        opnSplf( 'QSYSPRT' );
        splfLineStartsWith( '*** Tests from TESTPGM03 ***' );
        splfLineStartsWith( 'TESTFALSE - FAILURE' );
        splfLineStartsWith( 'Expected 5, but was 4.' );
        splfLineStartsWith( '  assert' );
        splfLineStartsWith( '  iEqual' );
        splfLineStartsWith( '  TESTFALSE (TESTPGM03:1300)' );
        splfLineStartsWith( '-----------------------' );
        splfLineStartsWith( 'TESTFALSE2 - FAILURE' );
        splfLineStartsWith( 'Expected 6, but was 4.' );
        splfLineStartsWith( '  assert' );
        splfLineStartsWith( '  iEqual' );
        splfLineStartsWith( '  TESTFALSE2 (TESTPGM03:2200)' );
        splfLineStartsWith( '-----------------------' );
        splfLineStartsWith( 'FAILURE! 2 test cases, 2 assertions,'
                          + ' 2 failures, 0 errors.' );
        cloSplf();

      /end-free
     P                 e


     PtestNonTestProc...
     P                 b                   Export
     DtestNonTestProc...
     D                 pi
      /free

        run( 'RUCALLTST QTEMP/TESTPGM04': noError: '*COMP': msgTxt );

        aEqual( 'Success. 2 test cases, 0 assertions, 0 failures, 0 errors.':
                msgTxt );

      /end-free
     P                 e


     PtestSetupAndTearDown...
     P                 b                   Export
     DtestSetupAndTearDown...
     D                 pi
      /free

        run( 'RUCALLTST QTEMP/TESTPGM05': errorExpected: '*ESCAPE': msgTxt );

        aEqual( 'FAILURE! 2 test cases, 0 assertions, 1 failures, 0 errors.':
                msgTxt );

        aEqual( 'setup'        : rtvMsg('*INFO') );
        aEqual( 'test1'        : rtvMsg('*INFO') );
        aEqual( 'teardown'     : rtvMsg('*INFO') );
        aEqual( 'setup'        : rtvMsg('*INFO') );
        aEqual( 'test2'        : rtvMsg('*INFO') );    // Raises a failure.
        aEqual( 'teardown'     : rtvMsg('*INFO') );    // Call 'teardown' anyway.

      /end-free
     P                 e


     PtestError        b                   Export
     DtestError        pi
      /free

        run( 'RUCALLTST QTEMP/TESTPGM06': errorExpected: '*ESCAPE': msgTxt );

        aEqual( 'ERROR! 1 test cases, 0 assertions, 0 failures, 1 errors.':
                msgTxt );

        opnSplf( 'QSYSPRT' );
        splfLineStartsWith( '*** Tests from TESTPGM06 ***' );
        splfLineStartsWith( 'TESTERROR - ERROR' );
        splfLineStartsWith( 'MCH1211 - ' );
        splfLineStartsWith( '  TESTERROR (TESTPGM06:1400)' );
        splfLineStartsWith( '-----------------------' );
        splfLineStartsWith( 'ERROR! 1 test cases, 0 assertions,'
                          + ' 0 failures, 1 errors.' );
        cloSplf();

      /end-free
     P                 e


     PtestManyTests    b                   Export
     DtestManyTests    pi
      /free

        run( 'RUCALLTST QTEMP/TESTPGM13': noError: '*COMP': msgTxt );

        aEqual( 'Success. 256 test cases, 0 assertions, 0 failures, 0 errors.':
                msgTxt );

      /end-free
     P                 e


     PtestStackTrace   b                   Export
     DtestStackTrace   pi
      /free

        run( 'RUCALLTST QTEMP/TESTPGM07' : errorExpected : '*ESCAPE': msgTxt );

        aEqual( 'FAILURE! 1 test cases, 1 assertions, 1 failures, 0 errors.':
                msgTxt );

        opnSplf( 'QSYSPRT' );
        splfLineStartsWith( '*** Tests from TESTPGM07 ***' );
        splfLineStartsWith( 'TESTSTACK - FAILURE' );
        splfLineStartsWith( 'Expected 5, but was 4.' );
        splfLineStartsWith( '  assert' );
        splfLineStartsWith( '  iEqual' );
        splfLineStartsWith( '  FAILINGPROC (TESTPGM07:1300)' );
        splfLineStartsWith( '  TESTSTACK (TESTPGM07:2200)' );
        splfLineStartsWith( '-----------------------' );
        splfLineStartsWith( 'FAILURE! 1 test cases, 1 assertions,'
                          + ' 1 failures, 0 errors.' );
        cloSplf();

      /end-free
     P                 e


     PtestMissingObject...
     P                 b                   Export
     DtestMissingObject...
     D                 pi
      /free

        run( 'RUCALLTST QTEMP/TESTPGM08' : errorExpected : '*ESCAPE' : msgTxt );

        aEqual( 'RPGUnit Error.'
              + ' Error while loading the test suite in QTEMP/TESTPGM08.' :
                msgTxt );

      /end-free
     P                 e


     PtestErrorDuringSetup...
     P                 b                   Export
     DtestErrorDuringSetup...
     D                 pi
      /free

        run( 'RUCALLTST QTEMP/TESTPGM09' : errorExpected : '*ESCAPE' : msgTxt );

        aEqual( 'ERROR! 1 test cases, 0 assertions, 0 failures, 1 errors.' :
                msgTxt );

        aEqual( 'setup'        : rtvMsg('*INFO') );    // Error during setup.
              // Test should not be called.
        aEqual( 'teardown'     : rtvMsg('*INFO') );    // Teardown should be called anyway.

        opnSplf( 'QSYSPRT' );
        splfLineStartsWith( '*** Tests from TESTPGM09 ***' );
        splfLineStartsWith( 'TEST - ERROR' );
        splfLineStartsWith( 'MCH1211 - ' );
        splfLineStartsWith( '  SETUP (TESTPGM09:2100)' );
        splfLineStartsWith( '-----------------------' );
        splfLineStartsWith( 'ERROR! 1 test cases, 0 assertions,'
                          + ' 0 failures, 1 errors.' );
        cloSplf();

      /end-free
     P                 e


     PtestErrorDuringTearDown...
     P                 b                   Export
     DtestErrorDuringTearDown...
     D                 pi
      /free

        run( 'RUCALLTST QTEMP/TESTPGM10' : errorExpected : '*ESCAPE' : msgTxt );

        aEqual( 'ERROR! 1 test cases, 0 assertions, 0 failures, 1 errors.' :
                msgTxt );

        opnSplf( 'QSYSPRT' );
        splfLineStartsWith( '*** Tests from TESTPGM10 ***' );
        splfLineStartsWith( 'TEST - ERROR' );
        splfLineStartsWith( 'MCH1211 - ' );
        splfLineStartsWith( '  TEARDOWN (TESTPGM10:1900)' );
        splfLineStartsWith( '-----------------------' );
        splfLineStartsWith( 'ERROR! 1 test cases, 0 assertions,'
                          + ' 0 failures, 1 errors.' );
        cloSplf();

      /end-free
     P                 e


     PtestNoTestCase   b                   Export
     DtestNoTestCase   pi
      /free

        run( 'RUCALLTST QTEMP/TESTPGM11' : errorExpected : '*ESCAPE' : msgTxt );

        aEqual( 'RPGUnit Error.'
              + ' No test case found in service program QTEMP/TESTPGM11.' :
                msgTxt );

      /end-free
     P                 e


     PtestSetupSuiteAndTearDownSuite...
     P                 b                   Export
     DtestSetupSuiteAndTearDownSuite...
     D                 pi
      /free

        run( 'RUCALLTST QTEMP/TESTPGM12': errorExpected: '*ESCAPE': msgTxt );

        aEqual( 'FAILURE! 2 test cases, 0 assertions, 1 failures, 0 errors.':
                msgTxt );

        aEqual( 'setupSuite'   : rtvMsg('*INFO') );
        aEqual( 'setup'        : rtvMsg('*INFO') );
        aEqual( 'test1'        : rtvMsg('*INFO') );
        aEqual( 'teardown'     : rtvMsg('*INFO') );
        aEqual( 'setup'        : rtvMsg('*INFO') );
        aEqual( 'test2'        : rtvMsg('*INFO') );    // Raises a failure.
        aEqual( 'teardown'     : rtvMsg('*INFO') );    // Call 'teardown' anyway.
        aEqual( 'teardownSuite': rtvMsg('*INFO') );    // Call 'teardownsuite' anyway.

      /end-free
     P                 e


     PtestBigInteger   b                   Export
     DtestBigInteger   pi
      /free

        run( 'RUCALLTST QTEMP/TESTPGM14' : errorExpected : '*ESCAPE' : msgTxt );

        aEqual( 'FAILURE! 2 test cases, 2 assertions, 1 failures, 0 errors.' :
                msgTxt );

        opnSplf( 'QSYSPRT' );
        splfLineStartsWith( '*** Tests from TESTPGM14 ***' );
        splfLineStartsWith( 'TEST_DIFFERENT - FAILURE' );
        splfLineStartsWith( 'Expected 1234567890123456789012345678901,'
                          + ' but was 123456789012345678901234567890' );
        splfLineStartsWith( '0.' );
        splfLineStartsWith( '  assert' );
        splfLineStartsWith( '  iEqual' );
        splfLineStartsWith( '  TEST_DIFFERENT (TESTPGM14:2800)' );
        splfLineStartsWith( '-----------------------' );
        splfLineStartsWith( 'FAILURE! 2 test cases, 2 assertions,'
                          + ' 1 failures, 0 errors.' );
        cloSplf();

      /end-free
     P                 e


     PtestForceSpoolOnSuccess...
     P                 b                   Export
     DtestForceSpoolOnSuccess...
     D                 pi
      /free

        run( 'RUCALLTST TSTPGM(QTEMP/TESTPGM15) DETAIL(*ALL)' :
             noError :
             '*COMP' :
             msgTxt );

        aEqual( 'Success. 2 test cases, 3 assertions, 0 failures, 0 errors.' :
                msgTxt );

        opnSplf( 'QSYSPRT' );
        splfLineStartsWith( '*** Tests from TESTPGM15 ***' );
        splfLineStartsWith( 'TESTTRUE - Success' );
        splfLineStartsWith( '  1 assertions' );
        splfLineStartsWith( '-----------------------' );
        splfLineStartsWith( 'TESTTRUE2 - Success' );
        splfLineStartsWith( '  2 assertions' );
        splfLineStartsWith( '-----------------------' );
        splfLineStartsWith( 'Success. 2 test cases, 3 assertions,'
                          + ' 0 failures, 0 errors.' );
        cloSplf();

      /end-free
     P                 e


     P testReverseOrder...
     P                 b                   Export
     D testReverseOrder...
     D                 pi
      /free

        run( 'RUCALLTST TSTPGM(QTEMP/TESTPGM16) ORDER(*REVERSE)' :
             noError :
             '*COMP' :
             msgTxt );

        aEqual( 'Success. 2 test cases, 0 assertions, 0 failures, 0 errors.':
                msgTxt );

        aEqual( 'setup'        : rtvMsg('*INFO') );
        aEqual( 'test2'        : rtvMsg('*INFO') );
        aEqual( 'teardown'     : rtvMsg('*INFO') );
        aEqual( 'setup'        : rtvMsg('*INFO') );
        aEqual( 'test1'        : rtvMsg('*INFO') );
        aEqual( 'teardown'     : rtvMsg('*INFO') );

      /end-free
     P                 e


     PtestChooseTest   b                   Export
     DtestChooseTest   pi
      /free

        run( 'RUCALLTST QTEMP/TESTPGM05 TSTPRC(TEST2)' :
             errorExpected : '*ESCAPE' : msgTxt );

        aEqual( 'FAILURE! 1 test cases, 0 assertions, 1 failures, 0 errors.':
                msgTxt );

        aEqual( 'setup'        : rtvMsg('*INFO') );
        aEqual( 'test2'        : rtvMsg('*INFO') );
        aEqual( 'teardown'     : rtvMsg('*INFO') );

        opnSplf( 'QSYSPRT' );
        splfLineStartsWith( '*** Tests from TESTPGM05 ***' );
        splfLineStartsWith( 'TEST2 - FAILURE' );
        splfLineStartsWith( 'test2' );
        splfLineStartsWith( '  TEST2 (TESTPGM05' );
        splfLineStartsWith( '-----------------------' );
        splfLineStartsWith( 'FAILURE! 1 test cases, 0 assertions,'
                          + ' 1 failures, 0 errors.' );
        cloSplf();

      /end-free
     P                 e


     PtestChooseNonExistingTest...
     P                 b                   Export
     DtestChooseNonExistingTest...
     D                 pi
      /free

        run( 'RUCALLTST QTEMP/TESTPGM05 TSTPRC(NON_EXISTING_TEST)' :
             errorExpected : '*ESCAPE' : msgTxt );

        aEqual( 'ERROR! 0 test cases, 0 assertions, 0 failures, 1 errors.':
                msgTxt );

        opnSplf( 'QSYSPRT' );
        splfLineStartsWith( '*** Tests from TESTPGM05 ***' );
        splfLineStartsWith( 'NON_EXISTING_TEST - ERROR' );
        splfLineStartsWith( 'Test procedure not found.' );
        splfLineStartsWith( '-----------------------' );
        splfLineStartsWith( 'ERROR! 0 test cases, 0 assertions,'
                          + ' 0 failures, 1 errors.' );
        cloSplf();

      /end-free
     P                 e


      //----------------------------------------------------------------------
      //   Helper Procedures
      //----------------------------------------------------------------------

     PbufEqual         b
     DbufEqual         pi              *
     D expBuf                       256a   Const Varying
     D actBuf_p                        *   Const

       // Actual buffer contents.
     D actBuf          s            256a   Based(actBuf_p)

      /free

        aEqual( expBuf :
                %subst( actBuf : 1 : %len(expBuf) ) );

        return actBuf_p + %len(expBuf);

      /end-free
     P                 e


     PcloSplf          b
     DcloSplf          pi
      /free

        QSPCLOSP( splf.hdl : dsECNull );

      /end-free
     P                 e


     PfindInSpool      b
     DfindInSpool      pi              *
     D charToFind                     1a   Const
     D startPos                        *   Const
     D endPos                          *   Const

       // Character at current position.
     D currentChar_p   s               *
     D currentChar     s              1a   Based(currentChar_p)

      /free

        currentChar_p = startPos;

        dow currentChar_p <= endPos;
          if currentChar = charToFind;
            return currentChar_p;
          endif;
          currentChar_p += 1;
        enddo;

        fail( 'Character "' + charToFind + '" not found in buffer' );

      /end-free
     P                 e


     PopnSplf          b
     DopnSplf          pi
     D splfNm                        10a   Const

       // QSP API generic header.
     D qspGenHdr_p     s               *
     D qspGenHdr       ds                  LikeDs(qspGenHdr_t)
     D                                     Based(qspGenHdr_p)
       // QSP API buffer (print data).
     D qspBuf          s            300a   Based(splf.bufPos_p)
     D qspBufChar      s              1a   Based(splf.bufPos_p)
       // User Space to store spool contents.
     D usrSpcNm        ds                  LikeDs(Object_t)

      /free

        QSPOPNSP( splf.hdl :
                  '*' :
                  *blank :
                  *blank :
                  splfNm :
                  -1 :
                  1 :
                  dsECNull );

        usrSpcNm.nm  = 'RUSPOOL';
        usrSpcNm.lib = 'QTEMP';

        qspGenHdr_p = crtUsrSpc( usrSpcNm :
                                 'RPGUnit - SelfTest - Spool File Contents.' );

        QSPGETSP( splf.hdl :
                  usrSpcNm :
                  'SPFR0300' :
                  -1 :    // Reading an entire spooled file.
                  '*ERROR' :
                  dsECNull );

        aEqual( 'C' : qspGenHdr.compInd );

        splf.bufPos_p    = qspGenHdr_p + qspGenHdr.firstBufOff;
        splf.usrSpcEnd_p = qspGenHdr_p + qspGenHdr.usrSpcSizeUsed;

      /end-free
     P                 e


     PsplfLineStartsWith...
     P                 b
     DsplfLineStartsWith...
     D                 pi
     D expString                    256a   Const Varying

      /free

        splf.bufPos_p = findInSpool( NL : splf.bufPos_p : splf.usrSpcEnd_p );
        splf.bufPos_p = bufEqual( expString : splf.bufPos_p + 1 );

      /end-free
     P                 e


     Prun              b
     Drun              pi
     D cmd                        32767a   Const Varying
     D errorExpected                   n   Const Options(*NoPass)
     D msgType                       10a   Const Options(*NoPass)
     D msgTxt                       256a   Options(*NoPass)

      /free

        if %parms >= 2 and errorExpected;
          callp(e) qcmdexc( cmd: %len(cmd) );
          assert( %error: 'Expected error missing' );
        else;
          qcmdexc( cmd: %len(cmd) );
        endif;

        if %parms >= 4;
          msgTxt = rtvMsg( msgType );
        endif;

      /end-free
     Prun              e


     PrtvMsg           b
     DrtvMsg           pi           256a
     D msgType                       10a   Const

       // TODO I don't need this powerful format.
     D fmtNm           c                   Const('RCVM0300')
     D callStkEnt      c                   Const('*')
     D callStkCnt      c                   Const(1)
     D msgKey          c                   Const(*blank)
     D waitTime        c                   Const(0)
     D msgAction       c                   Const('*REMOVE')

     D rawInfo         ds                  LikeDs(RCVM0300)
     D                                     Based(rawInfo_p)
     D rawInfo_p       s               *
     D rawInfoBuf      s          32565a
     D msg             s            256a   Based(msg_p)
     D msg_p           s               *

      /free

        rawInfo_p = %addr( rawInfoBuf );

        QMHRCVPM( rawInfo:
                  %size(rawInfoBuf):
                  fmtNm:
                  callStkEnt:
                  callStkCnt:
                  msgType:
                  msgKey:
                  waitTime:
                  msgAction:
                  dsECNull );

        assert( rawInfo.bytesA > 0: %trim(msgType) + ' Message Not Found' );

        if rawInfo.msgLenR > 0;    // If there is a Message, return it.
          msg_p = %addr(rawInfo) + %size(rawInfo) + rawInfo.rplDataLenR;
          return %subst( msg: 1: rawInfo.msgLenR );
        else;    // Else return 'Replacement data or impromptu message text'.
          msg_p = %addr(rawInfo) + %size(rawInfo) + 0;
          return %subst( msg: 1: rawInfo.rplDataLenR );
        endif;

      /end-free
     P                 e
