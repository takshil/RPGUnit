      //
      // Extracts message info.
      //

     H NoMain Option(*SrcStmt)

      //----------------------------------------------------------------------
      //   Exported Procedures
      //----------------------------------------------------------------------

      /copy RPGUNITY1,PGMMSG


      //----------------------------------------------------------------------
      //   Imported Procedures
      //----------------------------------------------------------------------

      /copy RPGUNITY1,DSEC
      /copy RPGUNITY1,QMHRCVPM
      /copy RPGUNITY1,QMHSNDPM
      /copy RPGUNITY1,TEMPLATES


      //----------------------------------------------------------------------
      //   Procedure Definitions
      //----------------------------------------------------------------------

       // TODO Rename to rcvExcpMsgInfo.
     P getExcpMsgInfo  b                   Export
     D getExcpMsgInfo  pi                  LikeDs(ExcpMsgInfo_t)

     D msg             ds                  LikeDs(Msg_t)
     D excpMsgInfo     ds                  LikeDs(ExcpMsgInfo_t)

      /free

        msg = rcvPgmMsg( '*EXCP' : ONE_CALL_STK_LVL_ABOVE_HERE );

        excpMsgInfo.msgId  = msg.id;
        excpMsgInfo.msg    = msg.txt;
        excpMsgInfo.pgmNm  = msg.sender.pgmNm;
        excpMsgInfo.procNm = msg.sender.procNm;
        excpMsgInfo.sttNb  = msg.sender.sttNb;

        return excpMsgInfo;

      /end-free
     P getExcpMsgInfo  e


     P rcvPgmMsg       b                   Export
     D rcvPgmMsg       pi                  LikeDs(Msg_t)
     D  msgType                      10a   Const
     D  callStkCnt                   10i 0 Const Options(*NoPass)

       // TODO move these constants to QMHRC member.
       // Most detailed format for QMHRCVPM API.
     D ALL_MSG_INFO_WITH_SENDER_INFO...
     D                 c                   Const('RCVM0300')
       // The current call stack entry.
     D THIS_CALL_STK_ENT...
     D                 c                   Const('*')
       // No message key.
     D NO_MSG_KEY      c                   Const(*blank)
       // Do not wait for receiving the message.
     D NO_WAIT         c                   Const(0)
       // Remove the message after receiving it.
     D REMOVE_MSG      c                   Const('*REMOVE')

       // Safe value for the NoPass parameter callStkCnt.
     D safeCallStkCnt  s                   Like(callStkCnt)
       // Buffer for message info.
     D rawMsgBuf       s          32767a
     D rawMsgHdr       ds                  LikeDs(RCVM0300Hdr)
     D                                     Based(rawMsgHdr_p)
     D rawMsgHdr_p     s               *
       // Position in buffer (starting at 1).
     D bufPos          s             10i 0
       // Buffer for message sender info.
     D senderInfo      ds                  LikeDs(RCVM0300Sender)
     D                                     Based(senderInfo_p)
     D senderInfo_p    s               *
       // The received message.
     D msg             ds                  LikeDs(Msg_t)

      /free

        if %parms() > 1;
          safeCallStkCnt = callStkCnt;
        else;
          safeCallStkCnt = 0;
        endif;

        QMHRCVPM( rawMsgBuf :
                  %size(rawMsgBuf) :
                  ALL_MSG_INFO_WITH_SENDER_INFO :
                  THIS_CALL_STK_ENT :
                  ONE_CALL_STK_LVL_ABOVE_HERE + safeCallStkCnt :
                  msgType :
                  NO_MSG_KEY :
                  NO_WAIT :
                  REMOVE_MSG :
                  percolateErrors );

        rawMsgHdr_p = %addr( rawMsgBuf );

        if (rawMsgHdr.bytesA = 0);
          sndEscapeMsg( %trim(msgType) + ' message not found' );
        endif;

        msg.id = rawMsgHdr.msgId;

        bufPos = %size(rawMsgHdr) + 1;
        msg.rplData = %subst( rawMsgBuf :
                              bufPos :
                              rawMsgHdr.rplDataLenR );

        bufPos += rawMsgHdr.rplDataLenR;
        msg.txt = %subst( rawMsgBuf :
                          bufPos :
                          rawMsgHdr.msgLenR );

        bufPos += rawMsgHdr.msgLenR;
        bufPos += rawMsgHdr.msgHlpLenR;
        senderInfo_p = %addr(rawMsgBuf) + bufPos - 1;
        msg.sender.pgmNm  = senderInfo.sndPgmNm;
        msg.sender.procNm = senderInfo.sndProcNm;
        msg.sender.sttNb  = senderInfo.sndPgmSttNb;

        return msg;

      /end-free
     P rcvPgmMsg       e


     P sndCompMsg      b                   Export
       //----------------------------------------------------------------------
       // Send a completion message. See prototype.
       //----------------------------------------------------------------------
     D sndCompMsg      pi
     D  msg                         256a   Const

       // The message reference key (unique string of characters that identifies
       // a particular instance of a message in a queue).
     D msgKey          s              4a

      /free

        QMHSNDPM( 'CPF9897' :
                  'QCPFMSG   *LIBL' :
                  %trimr(msg) :
                  %len(%trimr(msg)) :
                  '*COMP' :
                  '*CTLBDY' :
                  1 :
                  msgKey :
                  percolateErrors );

      /end-free
     P sndCompMsg      e


     P sndEscapeMsg    b                   Export
       //----------------------------------------------------------------------
       // Send an escape message. See prototype.
       //----------------------------------------------------------------------
     D sndEscapeMsg    pi
     D  msg                         256a   Const

       // The message reference key (unique string of characters that identifies
       // a particular instance of a message in a queue).
     D msgKey          s              4a

      /free

        QMHSNDPM( 'CPF9897' :
                  'QCPFMSG   *LIBL' :
                  %trimr(msg) :
                  %len(%trimr(msg)) :
                  '*ESCAPE' :
                  '*CTLBDY' :
                  1 :
                  msgKey :
                  percolateErrors );

      /end-free
     P sndEscapeMsg    e


     P sndInfoMsg      b                   Export
       //----------------------------------------------------------------------
       // Send an information message. See prototype.
       //----------------------------------------------------------------------
     D sndInfoMsg      pi
     D  msg                         256a   Const

       // The message reference key (unique string of characters that identifies
       // a particular instance of a message in a queue).
     D msgKey          s              4a

      /free

        QMHSNDPM( *blank :    // TODO Create generic identifier.
                  'QCPFMSG   *LIBL' :
                  %trimr(msg) :
                  %len(%trimr(msg)) :
                  '*INFO' :
                  '*' :
                  1 :
                  msgKey :
                  percolateErrors );

      /end-free
     P sndInfoMsg      e

