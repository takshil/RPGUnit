      //
      // Extracts message info.
      //

     H NoMain Option(*SrcStmt)

      //----------------------------------------------------------------------
      //   Exported Procedures
      //----------------------------------------------------------------------

      /copy RPGUNITY1,PGMMSG


      //----------------------------------------------------------------------
      //   Imported Procedures
      //----------------------------------------------------------------------

      /copy RPGUNITY1,DSEC
      /copy RPGUNITY1,QMHRCVPM
      /copy RPGUNITY1,QMHSNDPM
      /copy RPGUNITY1,TEMPLATES


      //----------------------------------------------------------------------
      //   Private Procedures
      //----------------------------------------------------------------------

     D rcvPgmMsg       pr
     D  info                      32565a   Options(*VarSize)
     D  size                         10i 0 Const


      //----------------------------------------------------------------------
      //   Procedure Definitions
      //----------------------------------------------------------------------

     P getExcpMsgInfo  b                   Export
     D getExcpMsgInfo  pi                  LikeDs(ExcpMsgInfo_t)

     D msgInfo         ds                  LikeDs(ExcpMsgInfo_t)

     D rawMsgInfoSize  ds                  Qualified
     D  bytesR                       10i 0
     D  bytesA                       10i 0

     D rawMsgInfo      ds                  LikeDs(RCVM0300Hdr)
     D                                     Based(rawMsgInfo_p)
     D rawMsgInfo_p    s               *

     D msg             s            256a   Based(msg_p)
     D msg_p           s               *

     D senderInfo      ds                  LikeDs(RCVM0300Sender)
     D                                     Based(senderInfo_p)
     D senderInfo_p    s               *

      /free

        // Call rcvPgmMsg twice to get the number of bytes available.

        rcvPgmMsg( rawMsgInfoSize : %size(rawMsgInfoSize) );
        rawMsgInfo_p = %alloc( rawMsgInfoSize.bytesA );
        rcvPgmMsg( rawMsgInfo : rawMsgInfoSize.bytesA );

        msgInfo.msgId = rawMsgInfo.msgId;

        msg_p = %addr(rawMsgInfo)
              + %size(rawMsgInfo)
              + rawMsgInfo.rplDataLenR;
        msgInfo.msg = %subst( msg : 1 : rawMsgInfo.msgLenR );

        senderInfo_p = msg_p + rawMsgInfo.msgLenR + rawMsgInfo.msgHlpLenR;
        msgInfo.pgmNm  = senderInfo.sndPgmNm;
        msgInfo.procNm = senderInfo.sndProcNm;
        msgInfo.sttNb  = senderInfo.SndPgmSttNb;

        dealloc rawMsgInfo_p;

        return msgInfo;

      /end-free
     P getExcpMsgInfo  e


     P rcvPgmMsg       b
     D rcvPgmMsg       pi
     D  info                      32565a   Options(*VarSize)
     D  size                         10i 0 Const

     D fmtNm           c                   Const('RCVM0300')
     D callStkEnt      c                   Const('*')
       // Stack level 0 = rcvPgmMsg
       //             1 = getExcpMsgInfo
       //             2 = getExcpMsgInfo's caller
     D callStkCnt      c                   Const(2)
     D msgType         c                   Const('*EXCP')
     D msgKey          c                   Const(*blank)
     D waitTime        c                   Const(0)
     D msgAction       c                   Const('*SAME')

      /free

        QMHRCVPM( info:
                  size:
                  fmtNm:
                  callStkEnt:
                  callStkCnt:
                  msgType:
                  msgKey:
                  waitTime:
                  msgAction:
                  dsECNull );

      /end-free
     P rcvPgmMsg       e


     P sndCompMsg      b                   Export
       //----------------------------------------------------------------------
       // Send a completion message. See prototype.
       //----------------------------------------------------------------------
     D sndCompMsg      pi
     D  msg                         256a   Const

       // The message reference key (unique string of characters that identifies
       // a particular instance of a message in a queue).
     D msgKey          s              4a

      /free

        QMHSNDPM( 'CPF9897':
                  'QCPFMSG   *LIBL':
                  %trimr(msg):
                  %len(%trimr(msg)):
                  '*COMP':
                  '*CTLBDY':
                  1:
                  msgKey:
                  dsECNull );

      /end-free
     P sndCompMsg      e


     P sndEscapeMsg    b                   Export
       //----------------------------------------------------------------------
       // Send an escape message. See prototype.
       //----------------------------------------------------------------------
     D sndEscapeMsg    pi
     D  msg                         256a   Const

       // The message reference key (unique string of characters that identifies
       // a particular instance of a message in a queue).
     D msgKey          s              4a

      /free

        QMHSNDPM( 'CPF9897':
                  'QCPFMSG   *LIBL':
                  %trimr(msg):
                  %len(%trimr(msg)):
                  '*ESCAPE':
                  '*CTLBDY':
                  1:
                  msgKey:
                  dsECNull );

      /end-free
     P sndEscapeMsg    e


     P sndInfoMsg      b                   Export
       //----------------------------------------------------------------------
       // Send an information message. See prototype.
       //----------------------------------------------------------------------
     D sndInfoMsg      pi
     D  msg                         256a   Const

       // The message reference key (unique string of characters that identifies
       // a particular instance of a message in a queue).
     D msgKey          s              4a

      /free

        QMHSNDPM( *blank :    // TODO Create generic identifier.
                  'QCPFMSG   *LIBL' :
                  %trimr(msg) :
                  %len(%trimr(msg)) :
                  '*INFO' :
                  '*' :
                  1 :
                  msgKey :
                  dsECNull );

      /end-free
     P sndInfoMsg      e

