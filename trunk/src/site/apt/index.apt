 -----
 Summary
 -----
 -----

Summary
~~~~~~~
    RPGUnit is an open source framework aimed at making unit testing easy for RPG programmers.
    
    RPGUnit is a regression testing framework, similar to {{{http://www.junit.org}JUnit}} but written in RPG, a procedural language mainly found on the iSeries platform (a.k.a. AS/400). Developers use it to implement unit tests in RPG ILE. RPGUnit is {{{http://www.opensource.org/}Open Source}} Software, released under the {{{http://www.opensource.org/licenses/cpl1.0.php}Common Public License Version 1.0}} and hosted on {{{http://sourceforge.net/projects/rpgunit/}SourceForge}}.

* Features
~~~~~~~

    * General assertion facilities
    
    * Automatic detection of test procedures using introspection
    
    * Special setup and teardown procedures to avoid duplication between test cases
    
    * Standard compiling command

    * CL-friendly command line runner. A failure or an error will be percolated to the caller

* News
~~~~~~

    <<2007-06-10 - File Release on SourceForge>>
    
    The source code is available as archives (both .zip and .tar.gz) on sourceforge. No need for a subversion client anymore.

    <<2007-06-09 - New Maven-generated Website>>
    
    The website is now generated by {{{http://maven.apache.org}Maven}}.
    
    <<2006-09-05 - Project start at SourceForge>>
    
    RPGUnit 0.2 released on {{{http://sourceforge.net}SourceForge}}.
    
* Installation
~~~~~~~~~~~~~~~

    * Download a source code archive, using the Downloads link on the left.
    
    * Extract it, using an application like WinZip or gzip.
    
    * Create the physical source files on your iSeries host. From there on, LIB should be replaced by the name of the library where you want to install RPGUnit.
    
+-----+
===> CRTSRCPF FILE(LIB/RPGUNIT1) RCDLEN(112) TEXT('RPGUnit - Framework.')
===> CRTSRCPF FILE(LIB/RPGUNITC1) RCDLEN(112) TEXT('RPGUnit - Commands.')
===> CRTSRCPF FILE(LIB/RPGUNITF1) RCDLEN(112) TEXT('RPGUnit - Test Fixtures.')
===> CRTSRCPF FILE(LIB/RPGUNITT1) RCDLEN(112) TEXT('RPGUnit - Self-Test.')
===> CRTSRCPF FILE(LIB/RPGUNITY1) RCDLEN(112) TEXT('RPGUnit - Prototypes.')
+-----+

    * Upload the source code to your iSeries host.
    
+-----+
> cd THE/PATH/WHERE/YOU/EXTRACTED/THE/SOURCE/CODE/ARCHIVE
> ftp your.iSeries.host
ftp> ascii
ftp> prompt
ftp> cd /QSYS.LIB/LIB.LIB
ftp> mput *.FILE/*.MBR
ftp> bye
+-----+

    * Restore the source member meta-data.
    
+-----+
===> CRTBNDCL PGM(QTEMP/MKMETADATA) SRCFILE(LIB/RPGUNIT1)
===> CALL PGM(QTEMP/MKMETADATA) PARM(LIB)
+-----+

    * Compile the framework.
    
+-----+
===> CRTBNDCL PGM(LIB/MKRPGUNIT) SRCFILE(LIB/RPGUNIT1)
===> SBMJOB CMD(CALL PGM(LIB/MKRPGUNIT) PARM(LIB)) JOB(MKRPGUNIT)
+-----+

    * Start writing unit tests!

    * If you want, you can check the framework by running its own regression test harness.

        * Compile the test harness.
    
+-----+
===> CRTBNDCL PGM(LIB/MKRPGUNITT) SRCFILE(LIB/RPGUNITT1)
+-----+

        * Run the test harness.
    
+-----+
===> SBMJOB CMD(CALL PGM(LIB/MKRPGUNITT) PARM(QTEMP)) JOB(MKRPGUNITT)
+-----+

        * If the MKRPGUNITT job ends normally (without any error), it means the framework is sound and working.

* Usage
~~~~~~~

    * Create a NoMain RPGLE source member.
    
+-----+
H NoMain

 /copy RPGUNIT1,TESTCASE

DtestSomething    pr                        
                                            
PtestSomething    b                   Export
DtestSomething    pi                        
 * insert test code here                      
P                 e                         
+-----+

    * Write a test case, using assertion procedures (assert, iEquals, aEquals, fail...).
    
    * Compile the test, either using the RUCRTTST command or manually.
    
    * Run the test, using the RUCALLTST command.

 You can also try the {{{tutorial.html}TDD tutorial}}.