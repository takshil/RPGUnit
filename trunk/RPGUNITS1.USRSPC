      // Spike : creer un User Space et recupere le pointeur.

     h DftActGrp(*no) Option(*SrcStmt: *NoDebugIo)

      // DS pour les erreurs d'API.
      /copy RPGUNIT1,DSEC

      /copy RPGUNIT1,QUSCRTUS
      /copy RPGUNIT1,QUSPTRUS

       //
       // Message d'echappement en cas de probleme.
       //
     D EC_Escape       PR
     D   When                        60A   const
     D   CallStackCnt                10I 0 value
     D   ErrorCode                32766A   options(*varsize)

       // Description du User Space a creer.
     D MyUsrSpc        ds                  Qualified
     D  Name                         20A   Inz('MONUSRSPC QTEMP')
     D  Attribute                    10A   Inz('USRSPC')
     D  Size                         10I 0 Inz(1024)
     D  Value                         1A   Inz(x'00')
     D  Authority                    10A   Inz('*ALL')
     D  Text                         50A   Inz('Infos diverses')
     D  Replace                      10A   Inz('*YES')

       // Pointeur sur le User Space.
     D p_Header        S               *

      /free

        QUSCRTUS( MyUsrSpc.Name:
                  MyUsrSpc.Attribute:
                  MyUsrSpc.Size:
                  MyUsrSpc.Value:
                  MyUsrSpc.Authority:
                  MyUsrSpc.Text:
                  MyUsrSpc.Replace:
                  dsEC);

        if dsEC.BytesA > 0;
          EC_Escape('Calling QUSCRTUS API':3:dsEC);
        endif;

        QUSPTRUS(MyUsrSpc.Name: p_Header);

        *inlr = *on;

      /end-free


      *+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
      * Send back an escape message based on an API error code DS
      *+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
     P EC_Escape       B
     D EC_Escape       PI
     D   When                        60A   const
     D   CallStackCnt                10I 0 value
     D   ErrorCode                32766A   options(*varsize)

      *
      * Send Program Message API
      *
     D QMHSNDPM        PR                  ExtPgm('QMHSNDPM')
     D   MessageID                    7A   Const
     D   QualMsgF                    20A   Const
     D   MsgData                    256A   Const
     D   MsgDtaLen                   10I 0 Const
     D   MsgType                     10A   Const
     D   CallStkEnt                  10A   Const
     D   CallStkCnt                  10I 0 Const
     D   MessageKey                   4A
     D   Errors                       1A

      *
      * API error code (passed from caller)
      *
     D p_EC            S               *
     D dsEC            DS                  based(p_EC)
     D  dsECBytesP                   10I 0
     D  dsECBytesA                   10I 0
     D  dsECMsgID                     7A
     D  dsECReserv                    1A
     D  dsECMsgDta                  240A

      *
      * API error code (no error handling requested)
      *
     D dsNullError     DS
     D  dsNullError0                 10I 0 inz(0)

     D MsgDtaLen       S             10I 0
     D MsgKey          S              4A

     c                   eval      p_EC = %addr(ErrorCode)

     c                   if        dsECBytesA <= 16
     c                   eval      MsgDtaLen = 0
     c                   else
     c                   eval      MsgDtaLen = dsECBytesA - 16
     c                   endif

     C* diagnostic msg tells us when the error occurred in our pgm
     c                   callp     QMHSNDPM('CPF9897': 'QCPFMSG   *LIBL':
     c                               When: %Len(%trimr(when)): '*DIAG':
     c                               '*': 1:  MsgKey: dsNullError)

     C* send back actual error from API
     c                   callp     QMHSNDPM(dsECMsgID: 'QCPFMSG   *LIBL':
     c                               dsECMsgDta: MsgDtaLen: '*ESCAPE':
     c                               '*': CallStackCnt: MsgKey:
     c                               dsNullError)
     P                 E
