      //
      // Tests CMDRUN.
      //

     H NoMain Option(*SrcStmt)


      //----------------------------------------------------------------------
      //   Imported Procedures
      //----------------------------------------------------------------------

      // This module mocks the CMDRUNLOG procedures.
      /copy RPGUNITY1,CMDRUNLOG

      /copy RPGUNITY1,CMDRUN
      /copy RPGUNITY1,TEMPLATES
      /copy RPGUNIT1,TESTCASE


      //----------------------------------------------------------------------
      //   Exported Procedures
      //----------------------------------------------------------------------

     D setUp           pr

       // Test runTests with a one-test test suite, with DETAIL(*BASIC) option.
     D testSuccessfulTestWithDetailBasic...
     D                 pr
       // Test runTests with a one-test test suite, with DETAIL(*ALL) option.
     D testSuccessfulTestWithDetailAllAndOneAssertion...
     D                 pr
     D testSuccessfulTestWithDetailAllAndTwoAssertions...
     D                 pr
       // Test runTests with a two-test test suite, with DETAIL(*ALL) option.
     D testTwoSuccessfulTestsWithDetailAll...
     D                 pr
       // Test runTests with a two-test test suite, with ORDER(*REVERSE) option.
     D testTwoSuccessfulTestsWithOrderReverse...
     D                 pr
       // Test runTests with TSTPRC option.
     D testChooseOneTestProc...
     D                 pr
       // Test runTests, choosing a non existing TSTPRC option.
     D testChooseNonExistingTestProc...
     D                 pr


      //----------------------------------------------------------------------
      //   Private Procedures
      //----------------------------------------------------------------------

     D successful_test_with_one_assertion...
     D                 pr
     D successful_test_with_two_assertions...
     D                 pr


      //----------------------------------------------------------------------
      //   Constants
      //----------------------------------------------------------------------

       // TSTPRC option.
     D ALL_PROCS       c                   Const('*ALL')
       // ORDER options.
     D ORDER_API       c                   Const('*API')
     D ORDER_REVERSE   c                   Const('*REVERSE')
       // DETAIL options.
     D DETAIL_BASIC    c                   Const('*BASIC')
     D DETAIL_ALL      c                   Const('*ALL')


      //----------------------------------------------------------------------
      //   Global Variables
      //----------------------------------------------------------------------

       // In-memory log spool, made of an array and its index.
     D logLine         ds                  Qualified Dim(2)
     D  type                               Like(TestResult_t.outcome)
     D  procNm                             Like(ProcNm_t)
     D  assertionCnt                 10i 0
     D  msg                                Like(ExcpMsgInfo_t.msg)
     D logIdx          s             10i 0

       // An array of test cases, for testing purpose.
     D testCase        ds                  Dim(2) LikeDs(Proc_t)
       // A test suite, for testing purpose.
     D testSuite       ds                  LikeDs(TestSuite_t)


      //----------------------------------------------------------------------
      //   Test Definitions
      //----------------------------------------------------------------------

     P setUp           b                   Export
     D setUp           pi
      /free

        clear logIdx;
        clear logLine;

        clear testCase;
        clear testSuite;
        testSuite.testList = %addr(testCase);

      /end-free
     P                 e


     P testSuccessfulTestWithDetailBasic...
     P                 b                   Export
     D testSuccessfulTestWithDetailBasic...
     D                 pi
      /free

        // Setup.

        testSuite.testCasesCnt = 1;
        testCase(1).procNm = 'successful_test';

        // Execution.

        runTests( testSuite : ALL_PROCS : ORDER_API : DETAIL_BASIC );

        // Controls.

        iEqual( 0 : logIdx );

      /end-free
     P                 e


     P testSuccessfulTestWithDetailAllAndOneAssertion...
     P                 b                   Export
     D testSuccessfulTestWithDetailAllAndOneAssertion...
     D                 pi
      /free

        // Setup.

        testSuite.testCasesCnt = 1;
        testCase(1).procNm = 'successful_test_with_one_assertion';
        testCase(1).procPtr = %paddr(successful_test_with_one_assertion);

        // Execution.

        runTests( testSuite : ALL_PROCS : ORDER_API : DETAIL_ALL );

        // Controls.

        iEqual( 1 : logIdx );
        aEqual( TEST_CASE_SUCCESS : logLine(1).type );
        aEqual( 'successful_test_with_one_assertion' : logLine(1).procNm );
        iEqual( 1 : logLine(1).assertionCnt );

      /end-free
     P                 e


     P testSuccessfulTestWithDetailAllAndTwoAssertions...
     P                 b                   Export
     D testSuccessfulTestWithDetailAllAndTwoAssertions...
     D                 pi
      /free

        // Setup.

        testSuite.testCasesCnt = 1;
        testCase(1).procNm = 'successful_test_with_two_assertions';
        testCase(1).procPtr = %paddr(successful_test_with_two_assertions);

        // Execution.

        runTests( testSuite : ALL_PROCS : ORDER_API : DETAIL_ALL );

        // Controls.

        iEqual( 1 : logIdx );
        aEqual( 'successful_test_with_two_assertions' : logLine(1).procNm );
        iEqual( 2 : logLine(1).assertionCnt );

      /end-free
     P                 e


     P testTwoSuccessfulTestsWithDetailAll...
     P                 b                   Export
     D testTwoSuccessfulTestsWithDetailAll...
     D                 pi
      /free

        // Setup.

        testSuite.testCasesCnt = 2;
        testCase(1).procNm = 'successful_test_1';
        testCase(2).procNm = 'successful_test_2';

        // Execution.

        runTests( testSuite : ALL_PROCS : ORDER_API : DETAIL_ALL );

        // Controls.

        iEqual( 2 : logIdx );
        aEqual( 'successful_test_1' : logLine(1).procNm );
        aEqual( 'successful_test_2' : logLine(2).procNm );

      /end-free
     P                 e


     P testTwoSuccessfulTestsWithOrderReverse...
     P                 b                   Export
     D testTwoSuccessfulTestsWithOrderReverse...
     D                 pi
      /free

        // Setup.

        testSuite.testCasesCnt = 2;
        testCase(1).procNm = 'successful_test_1';
        testCase(2).procNm = 'successful_test_2';

        // Execution.

        runTests( testSuite : ALL_PROCS : ORDER_REVERSE : DETAIL_ALL );

        // Controls.

        iEqual( 2 : logIdx );
        aEqual( 'successful_test_2' : logLine(1).procNm );
        aEqual( 'successful_test_1' : logLine(2).procNm );

      /end-free
     P                 e


     P testChooseOneTestProc...
     P                 b                   Export
     D testChooseOneTestProc...
     D                 pi
      /free

        // Setup.

        testSuite.testCasesCnt = 2;
        testCase(1).procNm = 'test_1';
        testCase(2).procNm = 'test_2';

        // Execution.

        runTests( testSuite : 'test_2' : ORDER_API : DETAIL_ALL );

        // Controls.

        iEqual( 1 : logIdx );
        aEqual( 'test_2' : logLine(1).procNm );

      /end-free
     P                 e


     P testChooseNonExistingTestProc...
     P                 b                   Export
     D testChooseNonExistingTestProc...
     D                 pi
      /free

        // Setup.

        testSuite.testCasesCnt = 1;
        testCase(1).procNm = 'test_1';

        // Execution.

        runTests( testSuite : 'test_2' : ORDER_API : DETAIL_ALL );

        // Controls.

        iEqual( 1 : logIdx );
        aEqual( 'test_2' : logLine(1).procNm );
        aEqual( TEST_CASE_ERROR : logLine(1).type );
        aEqual( 'Test procedure not found.' : logLine(1).msg );

      /end-free
     P                 e


      //----------------------------------------------------------------------
      //   Support Procedures
      //----------------------------------------------------------------------

       // Mock a procedure provided by CMDRUNLOG.
     P logCompMsg      b                   Export
     D logCompMsg      pi
     D  msg                         256a   Const
      /free
        fail( 'Mock logCompMsg not implemented' );
      /end-free
     P                 e


       // Mock a procedure provided by CMDRUNLOG.
     P logError        b                   Export
     D logError        pi
     D  testNm                             Const Like(ProcNm_t)
     D  excpMsgInfo                        Const LikeDs(ExcpMsgInfo_t)
      /free

        logIdx += 1;
        logLine(logIdx).type = TEST_CASE_ERROR;
        logLine(logIdx).procNm = testNm;
        logLine(logIdx).msg = excpMsgInfo.msg;

      /end-free
     P                 e


       // Mock a procedure provided by CMDRUNLOG.
     P logFailure      b                   Export
     D logFailure      pi
     D  testNm                             Const Like(ProcNm_t)
     D  failure                            Const LikeDs(AssertFailEvt_t)
      /free
        fail( 'Mock logFailure not implemented' );
      /end-free
     P                 e


       // Mock a procedure provided by CMDRUNLOG.
     P logSuccess      b                   Export
     D logSuccess      pi
     D  testNm                             Const Like(ProcNm_t)
     D  assertionCnt                 10i 0 Const
      /free

        logIdx += 1;
        logLine(logIdx).type = TEST_CASE_SUCCESS;
        logLine(logIdx).procNm = testNm;
        logLine(logIdx).assertionCnt = assertionCnt;

      /end-free
     P                 e


       // Mock a procedure provided by CMDRUNLOG.
     P setLogContext   b                   Export
     D setLogContext   pi
     D  testPgm                            Const LikeDs(Object_t)
      /free
        fail( 'Mock setLogContext not implemented' );
      /end-free
     P                 e


       // Dummy test procedure.
     P successful_test_with_one_assertion...
     P                 b
     D successful_test_with_one_assertion...
     D                 pi
      /free
        iEqual( 4 : 2+2 );
      /end-free
     P                 e

       // Dummy test procedure.
     P successful_test_with_two_assertions...
     P                 b
     D successful_test_with_two_assertions...
     D                 pi
      /free
        iEqual( 4 : 2+2 );
        iEqual( 4 : 2+2 );
      /end-free
     P                 e

